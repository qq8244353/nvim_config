snippet seg2d
		template <class S, S (*op)(S, S), S (*e)()> struct segtree2d {
			public:
				segtree2d() : segtree2d(0, 0) {}
				explicit segtree2d(int h, int w) : segtree2d(vector<vector<S>>(h, vector<S>(w, e()))) {}
				explicit segtree2d(const vector<vector<S>>& u) : _h(int(u.size())), _w(int(u[0].size())) {
					hlog = ceil_pow(_h);
					hsize = 1 << hlog;
					wlog = ceil_pow(_w);
					wsize = 1 << wlog;
					v = vector<vector<S>>(2 * hsize, vector<S>(2 * wsize, e()));
					for (int i = 0; i < _h; i++) {
						for (int j = 0; j < _w; j++) {
							v[hsize + i][wsize + j] = u[i][j];
						}
					}
					for (int i = hsize * 2 - 1; i >= 1; i--) {
						if (i > hsize - 1) {
							for (int j = wsize - 1; j >= 1; j--) {
								update1(i, j);
							}
						}
						else {
							for (int j = wsize * 2 - 1; j >= 1; j--) {
								update2(i, j);
							}
						}
					}
				}
				void set(int p, int q, S x) {
					assert(0 <= p && p < _h && 0 <= q && q < _w);
					p += hsize;
					q += wsize;
					v[p][q] = x;
					for (int j = 1; j <= wlog; j++) {
						update1(p, q >> j);
					}
					for (int i = 1; i <= hlog; i++) {
						for (int j = 0; j <= wlog; j++) {
						update2(p >> i, q >> j);
						}
					}
				}

				S get(int p, int q) const {
					assert(0 <= p && p < _h && 0 <= q && q < _w);
					return v[p + hsize][q + wsize];
				}

				S prod(int u, int d, int l, int r) const {
					assert(0 <= l && l <= r && r <= _w && 0 <= u && u <= d && d <= _h);
					S smu = e(), smd = e();
					u += hsize;
					d += hsize;

					while (u < d) {
						if (u & 1) smu = op(smu, prod2(l, r, u++));
						if (d & 1) smd = op(prod2(l, r, --d), smd);
						u >>= 1;
						d >>= 1;
					}
					return op(smu, smd);
				}

				S all_prod() const { return v[1][1]; }

			private:
				int _h, hsize, hlog;
				int _w, wsize, wlog;
				vector<vector<S>> v;

				void update1(int i, int k) { v[i][k] = op(v[i][2 * k], v[i][2 * k + 1]); }

				void update2(int k, int j) { v[k][j] = op(v[2 * k][j], v[2 * k + 1][j]); }

				S prod2(int l, int r, int i) const {
					S sml = e(), smr = e();
					l += wsize;
					r += wsize;

					while (l < r) {
						if (l & 1) sml = op(sml, v[i][l++]);
						if (r & 1) smr = op(v[i][--r], smr);
						l >>= 1;
						r >>= 1;
					}
					return op(sml, smr);
				}

				int ceil_pow(int n) {
					int x = 0;
					while ((1U << x) < (unsigned int)(n)) x++;
					return x;
				}
		};
snippet rerootingdp
		template <class S, class T, class U, S (*e)(), S(*val)(S, T), S (*merge)(S, S), S (*upd)(S, U)>
		struct rerooting_dp {
			public:
				rerooting_dp() : rerooting_dp({}) {}
				explicit rerooting_dp(const vector<vector<int>>& v)
						: to(v), dp(vector<vector<S>>(v.size())), ans(vector<S>(v.size())) {
					dfs(0, -1);
					dfs2(0, -1, e());
				}

				S get(int v) const {
					return ans[v];
				}

				void debug() const {
					cerr<<"dp\n";rep(i,dp.size())rep(j_,dp[i].size())cerr<<dp[i][j_]<<(j_+1==dp[i].size()?"\n":" ");
					cerr << "yes" << endl;
				}

			private:
				vector<vector<int>> to;
				vector<vector<S>> dp;
				vector<S> ans;

				S dfs(int v, int p) {
					S sum = e();
					dp[v] = vector<S>(to[v].size());
					for (int i = 0; i < to[v].size(); i++) {
						if (to[v][i] == p) continue;
						dp[v][i] = dfs(to[v][i], v);
						sum = merge(sum, val(dp[v][i], T())); //change here
					}
					sum = upd(sum, U(v)); //change here
					return sum;
				}

				void dfs2(int v, int p, const S &s) {
					for (int i = 0; i < to[v].size(); i++) {
						if (to[v][i] == p) {
							dp[v][i] = s;
							break;
						}
					}
					vector<S> smr(to[v].size() + 1);
					smr[to[v].size()] = e();
					for (int i = to[v].size(); i > 0; i--) {
						smr[i - 1] = merge(smr[i], val(dp[v][i - 1], T())); //change here
					}
					ans[v] = upd(smr[0], U(v)); //change here
					S sml = e();
					for (int i = 0; i < to[v].size(); i++) {
					if (to[v][i] != p) {
						S t = merge(sml, smr[i + 1]);
						dfs2(to[v][i], v, upd(t, U(v))); //change here
					}
					sml = merge(sml, val(dp[v][i], T())); //change here
				}
			}
		};
		using S;
		struct T {
		};
		struct U {
		};
		S e() {
		}
		S val(S s, T t) {
		}
		S merge(S a, S b) {
		}
		S upd(S s, U u) {
		}
		vector to(n, vector<int>());
		rerooting_dp<S, T, U, e, val, merge, upd> dp(to);

snippet prime
    struct prime {
        public:
            prime() : isp(1e7) {}
            explicit prime (int n) : _n(n), isp(vector<_bool>(n + 1, true)), mfact(vector<int>(n + 1, -1)) {
                isp[0] = isp[1] = false;
                mfact[0] = mfact[1] = 1;
                for (int i = 2; i <= n; i++) {
                    if (isp[i]) {
                        ps.push_back(i);
                        mfact[i] = i;
                        for (int j = 2 * i; j <= n; j += i) {
                            isp[j] = false;
                            if (mfact[j] == -1) mfact[j] = i;
                        }
                    }
                }
            }
            vector<l_l> fast_get(int n) {
                vector<l_l> ret;
                assert(0 < n and n <= _n);
                int i = -1;
                while (n > 1) {
                    if (i == -1 or ret[i].first != mfact[n]) {
                        ret.push_back({mfact[n], 0});
                        i++;
                    }
                    n /= mfact[n];
                    ret[i].second++;
                }
                return ret;
            }
            vector<l_l> get(i64 n) {
                vector<l_l> ret;
                assert(0 < n and n <= ps.back() * ps.back());
                int i = 0, cnt = -1;
                while (ps[i] * ps[i] <= n) {
                    if (n % ps[i] == 0) {
                        ret.push_back({ps[i], 1});
                        cnt++;
                        n /= ps[i];
                        while (n % ps[i] == 0) {
                            n /= ps[i];
                            ret[cnt].second++;
                        }
                    }
                    i++;
                    if (i == ps.size()) break;
                }
                if (n > 1) ret.push_back({n, 1});
                return ret;
            }
            bool operator[](int n) {
                assert(0 < n and n <= _n);
                return isp[n];
            }
            vector<i64> get_all(i64 n) {
                i64 i = 1;
                vector<i64> ret;
                while (i * i <= n) {
                    if (n % i == 0) {
                        ret.push_back(i);
                        if (n / i != i) ret.push_back(n / i);
                    }
                    i++;
                }
                sort(ret.begin(), ret.end());
                return ret;
            }
        private:
            int _n;
            vector<_bool> isp; //is-prime
            vector<i64> ps; //primes
            vector<int> mfact;
    };
